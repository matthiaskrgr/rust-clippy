error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
  --> $DIR/matches.rs:26:5
   |
26 | /     match ExprNode::Butterflies {
27 | |         ExprNode::ExprAddrOf => Some(&NODE),
28 | |         _ => {
29 | |             let x = 5;
30 | |             None
31 | |         },
32 | |     }
   | |_____^
   |
   = note: `-D clippy::single-match-else` implied by `-D warnings`
help: try this
   |
26 |     if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else {
27 |     let x = 5;
28 |     None
29 | }
   |

error: you don't need to add `&` to all patterns
  --> $DIR/matches.rs:38:9
   |
38 | /         match v {
39 | |             &Some(v) => println!("{:?}", v),
40 | |             &None => println!("none"),
41 | |         }
   | |_________^
   |
   = note: `-D clippy::match-ref-pats` implied by `-D warnings`
help: instead of prefixing all patterns with `&`, you can dereference the expression
   |
38 |         match *v {
39 |             Some(v) => println!("{:?}", v),
40 |             None => println!("none"),
   |

error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`
  --> $DIR/matches.rs:49:5
   |
49 | /     match tup {
50 | |         &(v, 1) => println!("{}", v),
51 | |         _ => println!("none"),
52 | |     }
   | |_____^ help: try this: `if let &(v, 1) = tup { println!("{}", v) } else { println!("none") }`

error: you don't need to add `&` to all patterns
  --> $DIR/matches.rs:49:5
   |
49 | /     match tup {
50 | |         &(v, 1) => println!("{}", v),
51 | |         _ => println!("none"),
52 | |     }
   | |_____^
help: instead of prefixing all patterns with `&`, you can dereference the expression
   |
49 |     match *tup {
50 |         (v, 1) => println!("{}", v),
   |

error: you don't need to add `&` to both the expression and the patterns
  --> $DIR/matches.rs:55:5
   |
55 | /     match &w {
56 | |         &Some(v) => println!("{:?}", v),
57 | |         &None => println!("none"),
58 | |     }
   | |_____^
help: try
   |
55 |     match w {
56 |         Some(v) => println!("{:?}", v),
57 |         None => println!("none"),
   |

error: you don't need to add `&` to all patterns
  --> $DIR/matches.rs:66:5
   |
66 | /     if let &None = a {
67 | |         println!("none");
68 | |     }
   | |_____^
help: instead of prefixing all patterns with `&`, you can dereference the expression
   |
66 |     if let None = *a {
   |            ^^^^   ^^

error: you don't need to add `&` to both the expression and the patterns
  --> $DIR/matches.rs:71:5
   |
71 | /     if let &None = &b {
72 | |         println!("none");
73 | |     }
   | |_____^
help: try
   |
71 |     if let None = b {
   |            ^^^^   ^

error: Err(_) will match all errors, maybe not a good idea
  --> $DIR/matches.rs:82:9
   |
82 |         Err(_) => panic!("err"),
   |         ^^^^^^
   |
   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`
   = note: to remove this warning, match each error separately or use unreachable macro

error: this `match` has identical arm bodies
  --> $DIR/matches.rs:81:18
   |
81 |         Ok(_) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
   |
   = note: `-D clippy::match-same-arms` implied by `-D warnings`
note: same as this
  --> $DIR/matches.rs:80:18
   |
80 |         Ok(3) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
  --> $DIR/matches.rs:80:18
   |
80 |         Ok(3) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: Err(_) will match all errors, maybe not a good idea
  --> $DIR/matches.rs:88:9
   |
88 |         Err(_) => panic!(),
   |         ^^^^^^
   |
   = note: to remove this warning, match each error separately or use unreachable macro

error: this `match` has identical arm bodies
  --> $DIR/matches.rs:87:18
   |
87 |         Ok(_) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
   |
note: same as this
  --> $DIR/matches.rs:86:18
   |
86 |         Ok(3) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
  --> $DIR/matches.rs:86:18
   |
86 |         Ok(3) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: Err(_) will match all errors, maybe not a good idea
  --> $DIR/matches.rs:94:9
   |
94 |         Err(_) => {
   |         ^^^^^^
   |
   = note: to remove this warning, match each error separately or use unreachable macro

error: this `match` has identical arm bodies
  --> $DIR/matches.rs:93:18
   |
93 |         Ok(_) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
   |
note: same as this
  --> $DIR/matches.rs:92:18
   |
92 |         Ok(3) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
  --> $DIR/matches.rs:92:18
   |
92 |         Ok(3) => println!("ok"),
   |                  ^^^^^^^^^^^^^^
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: this `match` has identical arm bodies
   --> $DIR/matches.rs:102:18
    |
102 |         Ok(_) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    |
note: same as this
   --> $DIR/matches.rs:101:18
    |
101 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
   --> $DIR/matches.rs:101:18
    |
101 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: this `match` has identical arm bodies
   --> $DIR/matches.rs:109:18
    |
109 |         Ok(_) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    |
note: same as this
   --> $DIR/matches.rs:108:18
    |
108 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
   --> $DIR/matches.rs:108:18
    |
108 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: this `match` has identical arm bodies
   --> $DIR/matches.rs:115:18
    |
115 |         Ok(_) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    |
note: same as this
   --> $DIR/matches.rs:114:18
    |
114 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
   --> $DIR/matches.rs:114:18
    |
114 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: this `match` has identical arm bodies
   --> $DIR/matches.rs:121:18
    |
121 |         Ok(_) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    |
note: same as this
   --> $DIR/matches.rs:120:18
    |
120 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
   --> $DIR/matches.rs:120:18
    |
120 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: this `match` has identical arm bodies
   --> $DIR/matches.rs:144:29
    |
144 |         (Ok(_), Some(x)) => println!("ok {}", x),
    |                             ^^^^^^^^^^^^^^^^^^^^
    |
note: same as this
   --> $DIR/matches.rs:143:29
    |
143 |         (Ok(x), Some(_)) => println!("ok {}", x),
    |                             ^^^^^^^^^^^^^^^^^^^^
note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`
   --> $DIR/matches.rs:143:29
    |
143 |         (Ok(x), Some(_)) => println!("ok {}", x),
    |                             ^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: this `match` has identical arm bodies
   --> $DIR/matches.rs:159:18
    |
159 |         Ok(_) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    |
note: same as this
   --> $DIR/matches.rs:158:18
    |
158 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
note: consider refactoring into `Ok(3) | Ok(_)`
   --> $DIR/matches.rs:158:18
    |
158 |         Ok(3) => println!("ok"),
    |                  ^^^^^^^^^^^^^^
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: use as_ref() instead
   --> $DIR/matches.rs:168:33
    |
168 |       let borrowed: Option<&()> = match owned {
    |  _________________________________^
169 | |         None => None,
170 | |         Some(ref v) => Some(v),
171 | |     };
    | |_____^ help: try this: `owned.as_ref()`
    |
    = note: `-D clippy::match-as-ref` implied by `-D warnings`

error: use as_mut() instead
   --> $DIR/matches.rs:174:39
    |
174 |       let borrow_mut: Option<&mut ()> = match mut_owned {
    |  _______________________________________^
175 | |         None => None,
176 | |         Some(ref mut v) => Some(v),
177 | |     };
    | |_____^ help: try this: `mut_owned.as_mut()`

error: aborting due to 21 previous errors

